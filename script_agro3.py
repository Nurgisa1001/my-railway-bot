import os
import time
import requests
import threading
from datetime import datetime  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

# –¢–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω –∏ —Å–ø–∏—Å–æ–∫ —á–∞—Ç IDs –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_IDS = os.getenv("CHAT_IDS", "")
if CHAT_IDS:
    CHAT_IDS = CHAT_IDS.split(",")
else:
    CHAT_IDS = []

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä—ë—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ACCOUNTS = [
    {"email": os.getenv("ACCOUNT1_EMAIL"), "password": os.getenv("ACCOUNT1_PASSWORD"), "clicked": False},
    {"email": os.getenv("ACCOUNT2_EMAIL"), "password": os.getenv("ACCOUNT2_PASSWORD"), "clicked": False},
    {"email": os.getenv("ACCOUNT3_EMAIL"), "password": os.getenv("ACCOUNT3_PASSWORD"), "clicked": False}
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
options = Options()
options.add_argument("--headless")  # –£–±—Ä–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
options.add_argument("--disable-gpu")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")

found_button = False  # –§–ª–∞–≥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
vacancy_links = []  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π

def send_telegram_message(message):
    print("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...")
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    for chat_id in CHAT_IDS:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É ID –≤ —Å–ø–∏—Å–∫–µ
        data = {"chat_id": chat_id, "text": message}
        requests.post(url, data=data)
    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º!")

def update_vacancy_links():
    global vacancy_links
    while not all(account["clicked"] for account in ACCOUNTS):
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        print("üîπ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π...")
        driver.get("https://agropraktika.eu/vacancies")
        time.sleep(1)
        
        vacancies = driver.find_elements(By.CLASS_NAME, "vacancy-item")
        new_links = [vacancy.find_element(By.TAG_NAME, "a").get_attribute("href") for vacancy in vacancies]
        
        if new_links != vacancy_links:
            vacancy_links = new_links
            print("üîπ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π:")
            for link in vacancy_links:
                print(link)
        
        driver.quit()
        time.sleep(0.5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞

def login_and_check_vacancies(account):
    email = account["email"]
    password = account["password"]
    
    while not account["clicked"]:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        print(f"üîπ –í—Ö–æ–∂—É –≤ –∞–∫–∫–∞—É–Ω—Ç: {email}")
        driver.get("https://agropraktika.eu/login")
        time.sleep(2)
        
        try:
            email_input = driver.find_element(By.NAME, "email")
            password_input = driver.find_element(By.NAME, "password")
            email_input.send_keys(email)
            password_input.send_keys(password)
            password_input.submit()
            time.sleep(3)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç {email}: {e}")
            driver.quit()
            return
        
        while not account["clicked"]:
            if not vacancy_links:
                time.sleep(0.1)
                continue
            
            for link in vacancy_links:
                if account["clicked"]:
                    break
                
                print(f"üîπ [{email}] –û—Ç–∫—Ä—ã–≤–∞—é –≤–∞–∫–∞–Ω—Å–∏—é: {link}")
                driver.get(link)
                time.sleep(1)
                
                try:
                    print(f"üîπ [{email}] –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'...")
                    button_block = driver.find_element(By.XPATH, "/html/body/main/div/div/div[3]/div[2]")
                    buttons = button_block.find_elements(By.TAG_NAME, "button") + button_block.find_elements(By.TAG_NAME, "a")
                    
                    for button in buttons:
                        if "–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É" in button.text.lower():
                            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                            print(f"‚úÖ [{email}] –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ {link}! –ù–∞–∂–∏–º–∞—é...")
                            button.click()
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            message = (
                                f"–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞!\n"
                                f"–í—Ä–µ–º—è: {current_time}\n"
                                f"–ê–∫–∫–∞—É–Ω—Ç: {email}\n"
                                f"–í–∞–∫–∞–Ω—Å–∏—è: {link}"
                            )
                            send_telegram_message(message)
                            account["clicked"] = True
                            break
                except:
                    print(f"‚ùå [{email}] –ö–Ω–æ–ø–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ {link}, –ø—Ä–æ–≤–µ—Ä—è—é —Å–Ω–æ–≤–∞...")
        
        driver.quit()
        time.sleep(0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

def start_checking():
    threading.Thread(target=update_vacancy_links, daemon=True).start()  # –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
    threads = []
    
    for account in ACCOUNTS:
        thread = threading.Thread(target=login_and_check_vacancies, args=(account,))
        threads.append(thread)
        thread.start()
    
    for thread in threads:
        thread.join()
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    start_checking()
